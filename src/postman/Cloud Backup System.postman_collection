{
	"info": {
		"_postman_id": "3ec28ac2-056a-459e-8ab3-0c0c227799d1",
		"name": "Risevest - Cloud Backup System",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25701563"
	},
	"item": [
		{
			"name": "Local server",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Login user account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status is not empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Message is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"The data object is present in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Token is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data.token).to.exist.and.to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"dera@ieee.org\",\r\n    \"password\": \"starling\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8000/api/v1/auth/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register admin user",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"fullName\": \"Super admin 2\",\r\n    \"email\": \"admin@applet.com\",\r\n    \"password\": \"superadmin2\",\r\n    \"adminToken\": \"eJw1wTEOgjAQAOB3K1YX2X1337\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8000/api/v1/auth/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register regular user",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"fullName\": \"Chidera Anichebe\",\r\n    \"email\": \"user@app.com\",\r\n    \"password\": \"superuser\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8000/api/v1/auth/register",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login admin account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.status).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"  pm.expect(responseData.data).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Token is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Token format is correct\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data.token).to.exist.and.to.match(/^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+$/);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@applet.com\",\r\n    \"password\": \"superadmin2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8000/api/v1/auth/login",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke user session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate response body structure\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.data).to.exist.and.to.be.null;",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Data is null\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data).to.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjksInJvbGUiOiJhZG1pbiIsImZ1bGxOYW1lIjoiU3VwZXIgYWRtaW4gMiIsImlhdCI6MTY5MzE3MTYxOCwiZXhwIjoxNjkzMTc1MjE4fQ.__TchYy1vBF69sk7Ye9-lbp8VWBRYC2NMeyo7ExRQjE",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8000/api/v1/auth/revoke/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"revoke",
										"2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cloud service operations",
					"item": [
						{
							"name": "Download file",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsInJvbGUiOiJ1c2VyIiwiZnVsbE5hbWUiOiJDaGlkZXJhIEFuaWNoZWJlIiwiaWF0IjoxNjkzMDg0NDI1LCJleHAiOjE2OTMwODgwMjV9.u5v1oGS3KTziAxBPJGD3hA6jMj_A-gE3ZlQPRYgOeXY",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjksInJvbGUiOiJhZG1pbiIsImZ1bGxOYW1lIjoiU3VwZXIgYWRtaW4gMiIsImlhdCI6MTY5MzE3MTYxOCwiZXhwIjoxNjkzMTc1MjE4fQ.__TchYy1vBF69sk7Ye9-lbp8VWBRYC2NMeyo7ExRQjE",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8000/api/v1/storage/download/stecon2022.png",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"storage",
										"download",
										"stecon2022.png"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload file to storage",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsInJvbGUiOiJhZG1pbiIsImZ1bGxOYW1lIjoiU3VwZXIgYWRtaW4iLCJpYXQiOjE2OTMxMTgxMjgsImV4cCI6MTY5MzEyMTcyOH0.hOK4NSXTEwDqOmnATuNBGC8NrPigSwPJzLr1ri9mlDo",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/hp/Pictures/stecon2022.png"
										}
									]
								},
								"url": {
									"raw": "http://localhost:8000/api/v1/storage/upload",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"storage",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download file in subfolder",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsInJvbGUiOiJ1c2VyIiwiZnVsbE5hbWUiOiJDaGlkZXJhIEFuaWNoZWJlIiwiaWF0IjoxNjkzMDgwMjM2LCJleHAiOjE2OTMwODM4MzZ9.n01vBr13HuypAI_Kkk-BTeOyEBVLprY4DdnJ8lWFymI",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:8000/api/v1/storage/download/myFiles/.keep",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"storage",
										"download",
										"myFiles",
										".keep"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete file from storage and database",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsInJvbGUiOiJhZG1pbiIsImZ1bGxOYW1lIjoiU3VwZXIgYWRtaW4iLCJpYXQiOjE2OTMxMTgxMjgsImV4cCI6MTY5MzEyMTcyOH0.hOK4NSXTEwDqOmnATuNBGC8NrPigSwPJzLr1ri9mlDo",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8000/api/v1/storage/delete/stecon2022.png",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"storage",
										"delete",
										"stecon2022.png"
									]
								}
							},
							"response": []
						},
						{
							"name": "List files owned by user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsInJvbGUiOiJ1c2VyIiwiZnVsbE5hbWUiOiJDaGlkZXJhIEFuaWNoZWJlIiwiaWF0IjoxNjkzMDgwMjM2LCJleHAiOjE2OTMwODM4MzZ9.n01vBr13HuypAI_Kkk-BTeOyEBVLprY4DdnJ8lWFymI",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8000/api/v1/storage/list",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"storage",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch all files in the bucket",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsInJvbGUiOiJhZG1pbiIsImZ1bGxOYW1lIjoiU3VwZXIgYWRtaW4iLCJpYXQiOjE2OTMwODI3ODIsImV4cCI6MTY5MzA4NjM4Mn0.X9hmW2GeVysrpdX8EWhDZBcFsdWm4A50vvk9xhnL5cs",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8000/api/v1/storage/fetch-files",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"storage",
										"fetch-files"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mark file as unsafe",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjksInJvbGUiOiJhZG1pbiIsImZ1bGxOYW1lIjoiU3VwZXIgYWRtaW4gMiIsImlhdCI6MTY5MzEyMDM2NywiZXhwIjoxNjkzMTIzOTY3fQ.Jswm3LdxHQQN_BrTieYRct48y2pua1oyEqtSG5tzzFo",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8000/api/v1/storage/mark-unsafe/10",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"storage",
										"mark-unsafe",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create folder to hold files",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.status).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"  pm.expect(responseData.data).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.status).to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Data is null\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data).to.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjksInJvbGUiOiJhZG1pbiIsImZ1bGxOYW1lIjoiU3VwZXIgYWRtaW4gMiIsImlhdCI6MTY5MzE3MTYxOCwiZXhwIjoxNjkzMTc1MjE4fQ.__TchYy1vBF69sk7Ye9-lbp8VWBRYC2NMeyo7ExRQjE",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"folderName\": \"archives\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8000/api/v1/storage/create-folder",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"storage",
										"create-folder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Compress files",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsInJvbGUiOiJ1c2VyIiwiZnVsbE5hbWUiOiJDaGlkZXJhIEFuaWNoZWJlIiwiaWF0IjoxNjkzMTc2NTgzLCJleHAiOjE2OTMxODAxODN9.wbtYUp3n8u6UlbbZPSnbmWOC8QYYXU8rtgGgWlzvuZs",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/hp/Pictures/TB/IMG_9929.JPG"
										}
									]
								},
								"url": {
									"raw": "http://localhost:8000/api/v1/storage/compress",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"storage",
										"compress"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "File history",
					"item": [
						{
							"name": "Fetch file history",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"The id is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data).to.be.an('array');",
											"",
											"  responseData.data.forEach(function(item) {",
											"    pm.expect(item.id).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"fileName is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Data array should not be empty\");",
											"    ",
											"    responseData.data.forEach(function (item) {",
											"        pm.expect(item.fileName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"fileName should be a non-empty string\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Action is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an(\"object\");",
											"  pm.expect(responseData.data).to.be.an(\"array\").and.to.have.lengthOf.at.least(1);",
											"  ",
											"  responseData.data.forEach(function(item){",
											"    pm.expect(item.action).to.be.a(\"string\").and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjksInJvbGUiOiJhZG1pbiIsImZ1bGxOYW1lIjoiU3VwZXIgYWRtaW4gMiIsImlhdCI6MTY5MzE3MTYxOCwiZXhwIjoxNjkzMTc1MjE4fQ.__TchYy1vBF69sk7Ye9-lbp8VWBRYC2NMeyo7ExRQjE",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8000/api/v1/history",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch history for a given user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"fileName is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data).to.be.an('array');",
											"  ",
											"  responseData.data.forEach(function(item) {",
											"    pm.expect(item.fileName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"fileName should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Action is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    ",
											"    responseData.data.forEach(function (item) {",
											"        pm.expect(item.action).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Timestamp is in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    ",
											"    responseData.data.forEach(function (item) {",
											"        pm.expect(item.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Timestamp should be in valid date format\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjksInJvbGUiOiJhZG1pbiIsImZ1bGxOYW1lIjoiU3VwZXIgYWRtaW4gMiIsImlhdCI6MTY5MzE3MTYxOCwiZXhwIjoxNjkzMTc1MjE4fQ.__TchYy1vBF69sk7Ye9-lbp8VWBRYC2NMeyo7ExRQjE",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8000/api/v1/history/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"history",
										"2"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Remote server",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Login user account",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"dera@ieee.org\",\r\n  \"password\": \"starling\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://cloud-backup.onrender.com/api/v1/auth/login",
									"protocol": "https",
									"host": [
										"cloud-backup",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"  pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data.user.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
											"});",
											"",
											"",
											"pm.test(\"fullName is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data.user.fullName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"fullName should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Password is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.data.user.password).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Super Admin\",\r\n  \"email\": \"super@admin.com\",\r\n  \"password\": \"superadmin\",\r\n  \"adminToken\": \"<process.env.ADMIN_TOKEN>\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://cloud-backup.onrender.com/api/v1/auth/register",
									"protocol": "https",
									"host": [
										"cloud-backup",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register regular user",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"Chidera Anichebe\",\r\n  \"email\": \"dera@test.com\",\r\n  \"password\": \"starling\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://cloud-backup.onrender.com/api/v1/auth/register",
									"protocol": "https",
									"host": [
										"cloud-backup",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login admin account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.data).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Token is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"The status field must be one of the expected values\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.status).to.exist.and.to.be.oneOf([\"expectedValue1\", \"expectedValue2\", \"expectedValue3\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"super@admin.com\",\r\n  \"password\": \"superadmin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://cloud-backup.onrender.com/api/v1/auth/login",
									"protocol": "https",
									"host": [
										"cloud-backup",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke user session",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjksInJvbGUiOiJhZG1pbiIsImZ1bGxOYW1lIjoiU3VwZXIgYWRtaW4gMiIsImlhdCI6MTY5MzE3MTYxOCwiZXhwIjoxNjkzMTc1MjE4fQ.__TchYy1vBF69sk7Ye9-lbp8VWBRYC2NMeyo7ExRQjE",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://cloud-backup.onrender.com/api/v1/auth/revoke/2",
									"protocol": "https",
									"host": [
										"cloud-backup",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"revoke",
										"2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cloud service operations",
					"item": [
						{
							"name": "Download file",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://cloud-backup.onrender.com/api/v1/storage/download/",
									"protocol": "https",
									"host": [
										"cloud-backup",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"storage",
										"download",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload file to storage",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://cloud-backup.onrender.com/api/v1/storage/upload",
									"protocol": "https",
									"host": [
										"cloud-backup",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"storage",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download file in subfolder",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsInJvbGUiOiJ1c2VyIiwiZnVsbE5hbWUiOiJDaGlkZXJhIEFuaWNoZWJlIiwiaWF0IjoxNjkzMDgwMjM2LCJleHAiOjE2OTMwODM4MzZ9.n01vBr13HuypAI_Kkk-BTeOyEBVLprY4DdnJ8lWFymI",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://cloud-backup.onrender.com/api/v1/storage/download/myFiles/.keep",
									"protocol": "https",
									"host": [
										"cloud-backup",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"storage",
										"download",
										"myFiles",
										".keep"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete file from storage and database",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsInJvbGUiOiJhZG1pbiIsImZ1bGxOYW1lIjoiU3VwZXIgYWRtaW4iLCJpYXQiOjE2OTMxMTgxMjgsImV4cCI6MTY5MzEyMTcyOH0.hOK4NSXTEwDqOmnATuNBGC8NrPigSwPJzLr1ri9mlDo",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://cloud-backup.onrender.com/api/v1/storage/delete/stecon2022.png",
									"protocol": "https",
									"host": [
										"cloud-backup",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"storage",
										"delete",
										"stecon2022.png"
									]
								}
							},
							"response": []
						},
						{
							"name": "List files owned by user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsInJvbGUiOiJ1c2VyIiwiZnVsbE5hbWUiOiJDaGlkZXJhIEFuaWNoZWJlIiwiaWF0IjoxNjkzMDgwMjM2LCJleHAiOjE2OTMwODM4MzZ9.n01vBr13HuypAI_Kkk-BTeOyEBVLprY4DdnJ8lWFymI",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://cloud-backup.onrender.com/api/v1/storage/list",
									"protocol": "https",
									"host": [
										"cloud-backup",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"storage",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch all files in the bucket",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsInJvbGUiOiJhZG1pbiIsImZ1bGxOYW1lIjoiU3VwZXIgYWRtaW4iLCJpYXQiOjE2OTMwODI3ODIsImV4cCI6MTY5MzA4NjM4Mn0.X9hmW2GeVysrpdX8EWhDZBcFsdWm4A50vvk9xhnL5cs",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://cloud-backup.onrender.com/api/v1/storage/fetch-files",
									"protocol": "https",
									"host": [
										"cloud-backup",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"storage",
										"fetch-files"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mark file as unsafe",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjksInJvbGUiOiJhZG1pbiIsImZ1bGxOYW1lIjoiU3VwZXIgYWRtaW4gMiIsImlhdCI6MTY5MzEyMDM2NywiZXhwIjoxNjkzMTIzOTY3fQ.Jswm3LdxHQQN_BrTieYRct48y2pua1oyEqtSG5tzzFo",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://cloud-backup.onrender.com/api/v1/storage/mark-unsafe/10",
									"protocol": "https",
									"host": [
										"cloud-backup",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"storage",
										"mark-unsafe",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create folder to hold files",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjksInJvbGUiOiJhZG1pbiIsImZ1bGxOYW1lIjoiU3VwZXIgYWRtaW4gMiIsImlhdCI6MTY5MzE3MTYxOCwiZXhwIjoxNjkzMTc1MjE4fQ.__TchYy1vBF69sk7Ye9-lbp8VWBRYC2NMeyo7ExRQjE",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"folderName\": \"archives\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://cloud-backup.onrender.com/api/v1/storage/create-folder",
									"protocol": "https",
									"host": [
										"cloud-backup",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"storage",
										"create-folder"
									]
								}
							},
							"response": []
						},
						{
							"name": "Compress files",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsInJvbGUiOiJ1c2VyIiwiZnVsbE5hbWUiOiJDaGlkZXJhIEFuaWNoZWJlIiwiaWF0IjoxNjkzMTc2NTgzLCJleHAiOjE2OTMxODAxODN9.wbtYUp3n8u6UlbbZPSnbmWOC8QYYXU8rtgGgWlzvuZs",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/hp/Pictures/TB/IMG_9929.JPG"
										}
									]
								},
								"url": {
									"raw": "https://cloud-backup.onrender.com/api/v1/storage/compress",
									"protocol": "https",
									"host": [
										"cloud-backup",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"storage",
										"compress"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "File history",
					"item": [
						{
							"name": "Fetch file history",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - status, message, and data\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.data).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Data is an array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjksInJvbGUiOiJhZG1pbiIsImZ1bGxOYW1lIjoiU3VwZXIgYWRtaW4gMiIsImlhdCI6MTY5MzE3MTYxOCwiZXhwIjoxNjkzMTc1MjE4fQ.__TchYy1vBF69sk7Ye9-lbp8VWBRYC2NMeyo7ExRQjE",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://cloud-backup.onrender.com/api/v1/history",
									"protocol": "https",
									"host": [
										"cloud-backup",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch history for a given user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'status' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'message' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"  ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'data' array is present in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.data).to.exist.and.to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"The 'data' array should be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjksInJvbGUiOiJhZG1pbiIsImZ1bGxOYW1lIjoiU3VwZXIgYWRtaW4gMiIsImlhdCI6MTY5MzE3MTYxOCwiZXhwIjoxNjkzMTc1MjE4fQ.__TchYy1vBF69sk7Ye9-lbp8VWBRYC2NMeyo7ExRQjE",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://cloud-backup.onrender.com/api/v1/history/2",
									"protocol": "https",
									"host": [
										"cloud-backup",
										"onrender",
										"com"
									],
									"path": [
										"api",
										"v1",
										"history",
										"2"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}